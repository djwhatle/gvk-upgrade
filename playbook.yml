---
- hosts: localhost
  vars:
    migplan_name: "blog-plan"
    bucket_name: "FILL_IN"
    
    backup_local_dir: "backup_contents"
    convert_pending_dir: "convert_pending"
    convert_complete_dir: "convert_complete"

  tasks:

  - block:
    - name: Get MigPlan UID
      shell: oc get migplan {{ migplan_name }} -o=jsonpath='{.metadata.uid}'
      register: result

    - name: Set migplan_uid var
      set_fact:
        migplan_uid: "{{ result.stdout }}"

  - block:
    - name: Get MigMigration name corresponding with MigPlan UID
      shell: oc get migmigration -o json | jq -r '.items[] | select(.metadata.ownerReferences[].uid=="{{ migplan_uid }}") | .metadata.name '
      register: result

    - name: Set migmigration_name var
      set_fact:
        migmigration_name: "{{ result.stdout }}"

  - block:
    - name: Get MigMigration UID corresponding with MigMigration Name
      shell: oc get migmigration {{ migmigration_name }} -o jsonpath='{.metadata.uid}'
      register: result

    - name: Set migmigration_uid var
      set_fact:
        migmigration_uid: "{{ result.stdout }}"

  - block:
    - name: Get Velero Backup Name corresponding with MigMigration
      shell: oc get backup.velero.io --selector migration-initial-backup={{ migmigration_uid }} -o jsonpath={.items[*].metadata.name}
      register: result

    - name: Set backup_name var
      set_fact:
        backup_name: "{{ result.stdout }}"

  - block:
    - name: Get ExcludedResources from Velero Restore
      shell: oc get restore.velero.io  --selector migration-final-restore={{ migmigration_uid }} -o jsonpath='{.items[*].spec.excludedResources[*]}'
      register: result

    - name: Set excluded_resources var
      set_fact:
        excluded_resources: "{{ result.stdout.split(' ') }}"

  - block:
    - name: Download contents of Velero Backup from Bucket with S3 CLI
      shell: aws s3 cp s3://{{ bucket_name }}/velero/backups/{{ backup_name }} {{ backup_local_dir }} --recursive
      register: result

    - name: Unzip backup tar.gz resource contents 
      shell: tar -xf {{ backup_local_dir }}/{{ backup_name }}.tar.gz -C {{ backup_local_dir }}
      register: result

  - block:
      - name: Create directories to hold resources that will be converted
        file:
          path: "{{ item }}"
          state: directory
        with_items:
        - "{{ convert_pending_dir }}"
        - "{{ convert_complete_dir }}"

      - name: Best-effort copy all ExcludedResources to "convert_pending" directory
        shell: cp {{ backup_local_dir }}/resources/{{ item }}/namespaces/*/*.json {{ convert_pending_dir }}
        with_items: "{{ excluded_resources }}"
        register: result
        failed_when: result.rc > 1

      - name: Load files list of files to be converted
        shell: ls {{ convert_pending_dir }}
        register: result

      - name: Set files to be converted to ansible list
        set_fact:
          files_to_convert: "{{ result.stdout.split(' ') }}"

      - name: Convert resources with oc convert offline
        shell: oc convert --local=true -f {{ convert_pending_dir }}/{{ item }} > {{ convert_complete_dir }}/{{ item }}
        with_items: "{{ files_to_convert }}"
        

      

        

  




        
    

